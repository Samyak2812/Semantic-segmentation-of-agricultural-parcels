import os
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
from sklearn.model_selection import train_test_split

# Define U-Net architecture
class UNet(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(UNet, self).__init__()
        self.encoder = nn.Sequential(
            nn.Conv2d(in_channels, 64, kernel_size=3, padding=1),
            nn.ReLU(inplace=True),
            nn.Conv2d(64, 64, kernel_size=3, padding=1),
            nn.ReLU(inplace=True)
        )
        self.decoder = nn.Sequential(
            nn.Conv2d(64, out_channels, kernel_size=1)
        )
    
    def forward(self, x):
        x = self.encoder(x)
        x = self.decoder(x)
        return x

# Define data preprocessing and loading
data_transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

# Load and split the dataset into train and validation sets
data_dir = 'C:\Users\Samyakj\Documents\Dataset\Data'
image_files = os.listdir(os.path.join(data_dir, 'images'))
label_files = os.listdir(os.path.join(data_dir, 'labels'))
X_train, X_val, y_train, y_val = train_test_split(image_files, label_files, test_size=0.2)

# Define data loaders
class CustomDataset(torch.utils.data.Dataset):
    def __init__(self, image_files, label_files, transform=None):
        self.image_files = image_files
        self.label_files = label_files
        self.transform = transform

    def __len__(self):
        return len(self.image_files)

    def __getitem__(self, idx):
        img_name = os.path.join(data_dir, 'images', self.image_files[idx])
        image = Image.open(img_name)
        
        label_name = os.path.join(data_dir, 'labels', self.label_files[idx])
        label = Image.open(label_name)

        if self.transform:
            image = self.transform(image)
            label = self.transform(label)
        
        return image, label

train_dataset = CustomDataset(X_train, y_train, transform=data_transform)
train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)

val_dataset = CustomDataset(X_val, y_val, transform=data_transform)
val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)

# Create and train the U-Net model
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = UNet(in_channels=3, out_channels=num_classes).to(device)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Training loop
for epoch in range(num_epochs):
    model.train()
    for images, labels in train_loader:
        images, labels = images.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

    # Validation
    model.eval()
    with torch.no_grad():
        total_iou = 0
        total_pixel_accuracy = 0
        for images, labels in val_loader:
            images, labels = images.to(device), labels.to(device)
            outputs = model(images)
            predicted = outputs.argmax(1)
            iou = calculate_iou(predicted, labels)
            pixel_accuracy = calculate_pixel_accuracy(predicted, labels)
            total_iou += iou
            total_pixel_accuracy += pixel_accuracy

        avg_iou = total_iou / len(val_loader)
        avg_pixel_accuracy = total_pixel_accuracy / len(val_loader)

        print(f"Epoch {epoch+1}/{num_epochs}, Loss: {loss.item()}, IoU: {avg_iou}, Pixel Acc: {avg_pixel_accuracy}")

# Save the trained model
torch.save(model.state_dict(), 'unet_model.pth')
